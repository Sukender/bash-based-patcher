#!/bin/bash
# Creates a compressed binary diff (patch) between two directories.
# Author: Sukender (Benoit Neil)
# Licence: WTFPL v2 (see COPYING.txt)

# Dependencies, error codes, documentation: see "bbp_config.sh"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"		# Script dir
source "$DIR/bbp_config.sh" || exit 4

# --------------------------------------------------------------------------------
# Parameters parsing and usage

positionalOption() {
	if [ -z "$dir1" ]; then
		dir1="$1"
	else
		if [ -z "$dir2" ]; then
			dir2="$1"
		else
			echo "Unrecognized option: $1"
			exit 1
		fi
	fi
}

usage() {
	echo ""
	echo "$toolName"
	echo "Creates a compressed binary diff (patch) between two directories."
	echo
	echo "Syntax:"
	echo "  diff [options] oldDirectory newDirectory"
	echo
	echo "Options:"
	echo "  -h, --help"
	echo "      Displays this help text and exits."
	echo "  --man"
	echo "      Displays all documentation available and exits."
	echo "  --version"
	echo "      Displays a short (parsable) version information and exits."
	echo "  -p, --patch NAME"
	echo "      Changes the output patch file name to NAME (default: '$defaultpatchfile')."
	echo "      File is always overwritten without confirmation."
	echo "  -D, --delta NAME"
	echo "      Chooses the delta-compression tool NAME. Possibles choices are rdiff, xdelta3."
	echo "      rdiff *MAY* have better compression on data files, but be slightly"
	echo "      slower (especially upon decompression)"
	echo "  -v, --verbose"
	echo "      Adds a level of verbosity (more information). Default level = $defaultVerbosity."
	echo "  -q, --quiet"
	echo "      Removes a level of verbosity (more information). Default level = $defaultVerbosity."
	echo "      Please note that even level 0 is not absolutely quiet."
	echo "  --"
	echo "      Do not interpret any more arguments as options."
	echo
}


while [ "$#" -gt 0 ]; do
case "$1" in
	-v|--verbose)
		shift; verbosity=$(( verbosity + 1 ));
		;;
	-q|--quiet)
		shift; verbosity=$(( verbosity - 1 ));
		;;
	-h|--help)
		shift; usage; exit 0;
		;;
	--man)
		shift; usage; displayDoc; exit 0;
		;;
	--version)
		shift; echo "$toolVersion"; exit 0;
		;;
	-p|--patch)
		shift; patchfile="$1"; shift;
		;;
	-D|--delta)
		shift; deltaChoice="$1"; shift;
		;;
	--)
		shift;
		break;
		;;
	# an option argument, continue
	*)
		positionalOption "$1"
		shift;
		;;
esac
done

if [ -z "$dir1" ] || [ -z "$dir2" ]; then
	usage;
	exit 1;
fi

if [ ! -d "$dir2" ]; then
	echo "\"$dir2\" ('newDirectory') is not a directory!"
	exit 1
fi

chooseDelta "$deltaChoice"

if (( $verbosity >= 2 )); then
	echo "$toolName"
	echo $separatorDisplay
	echo ""
	echo "Generating patch from '$dir1' to '$dir2'"
	echo "Patch file: $patchfile"
	echo "Delta: $delta"
fi

# --------------------------------------------------------------------------------

if (( $verbosity >= 1 )); then
	echo $separatorDisplay
	echo "[$(date +%H:%M:%S)] Creating patch. This may take a while."
	echo "    Please note this is a multiple phases creation: the output compressor may stall (especially at 0%) for a long time."
	echo ""
fi

rm pipe1 pipe2 "$patchfile" 2> /dev/null
mkfifo pipe1 pipe2 || exit 2

readBase "$dir1" pipe1		# Handles dir1 as an archive or dir

if [ "$delta" == "xdelta3" ]; then
	# xdelta3

	# TODO try the xdelta invocation? : XDELTA="-s source" tar --use-compress-program=xdelta3 -cf target.vcdiff target
	#$tarDir --directory="$dir1" . > pipe1 & $tarDir --directory="$dir2" . > pipe2 & xdelta3 -e -9 -S "none" -s pipe1 pipe2 | xz > "$patchfile" || exit 2
	#$tarDir --directory="$dir1" . > pipe1 &
	$tarDir --directory="$dir2" . > pipe2 & xdelta3 -e -9 -s pipe1 pipe2 | xz > "$patchfile" || exit 2
	#$tarDir --directory="$dir1" . > pipe1 & $tarDir --directory="$dir2" . > pipe2 & xdelta3 -e -9 -S lzma -s pipe1 pipe2 "$patchfile" || exit 2
else
	# rdiff

	rm pipe1sig 2> /dev/null
	mkfifo pipe1sig || exit 2
	#$tarDir --directory="$dir1" . > pipe1 &
	rdiff signature pipe1 pipe1sig & $tarDir --directory="$dir2" . > pipe2 & rdiff delta pipe1sig pipe2 | xz > "$patchfile" || exit 2
		# > /dev/null
	rm pipe1sig
fi

rm pipe1 pipe2

if (( $verbosity >= 1 )); then
	echo $separatorDisplay
	echo "[$(date +%H:%M:%S)] Patch created. Size = $(du -sb "$patchfile" | awk '{ print $1 }') ($(du -sh "$patchfile" | awk '{ print $1 }'))"
	echo ""
fi

# --------------------------------------------------------------------------------

# Insecure FTP upload:
# HOST='transfert.virtuelcity.com'
# USER='transfert'
# PASSWD='???????'

# ftp -n $HOST <<END_SCRIPT
# quote USER $USER
# quote PASS $PASSWD
# binary
# put $patchfile
# quit
# END_SCRIPT

#!/bin/bash
# Applies a compressed binary diff (patch) on a directory or specific archiv, creating a copy (ie. not in-place).
# Author: Sukender (Benoit Neil)
# Licence: WTFPL v2 (see COPYING.txt)

# Dependencies, error codes, documentation: see "bbp_config.sh"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"		# Script dir
source "$DIR/bbp_config.sh" || exit 4

intermediate1="1.tar"

# --------------------------------------------------------------------------------
# Parameters parsing and usage

positionalOption() {
	if [ -z "${dir1:-}" ]; then
		dir1="$1"
	else
		echo "Unrecognized option: $1"
		exit 1
	fi
}

usage() {
	echo ""
	echo "$toolName"
	echo "Applies a compressed binary diff (patch) on a directory or archive, creating a copy (ie. not in-place)."
	echo "Archive (replacing 'old' directory) is not whatever a compressor can do: it must be tar-based, preferably generated from '$arToolName'."
	echo
	echo "Syntax:"
	echo "  patch [options] old"
	echo
	echo "Options:"
	echo
	echo "  -h, --help"
	echo "      Displays this help text and exits."
	echo "  --man"
	echo "      Displays all documentation available and exits."
	echo "  --version"
	echo "      Displays a short (parsable) version information and exits."
	echo "  -g, --get URL"
	echo "      Downloads URL as the patch to apply."
	echo "  -p, --patch NAME"
	echo "      Uses the local patch file NAME (instead of auto-detection)."
	echo "  -o, --output NAME"
	echo "      Specifies an output name for 'new' directory."
	echo "      If 'new' is omitted, it is automatically generated."
	echo "  -v, --verbose"
	echo "      Adds a level of verbosity (more information). Default level = $defaultVerbosity."
	echo "  -q, --quiet"
	echo "      Removes a level of verbosity (less information). Default level = $defaultVerbosity."
	echo "      Please note that even level 0 is not absolutely quiet."
	echo "  --"
	echo "      Do not interpret any more arguments as options."
	echo
}


while [ "$#" -gt 0 ]; do
case "$1" in
	-v|--verbose)
		shift; verbosity=$(( verbosity + 1 ));
		;;
	-q|--quiet)
		shift; verbosity=$(( verbosity - 1 ));
		;;
	-h|--help)
		shift; usage; exit 0;
		;;
	--man)
		shift; usage; displayDoc; exit 0;
		;;
	--version)
		shift; echo "$toolVersion"; exit 0;
		;;
	-p|--patch)
		shift; patchfile="$1"; shift;
		;;
	-o|--output)
		shift; dir2="$1"; shift;
		;;
	-g|--get)
		shift; patchUrl="$1"; shift;
		;;
	--)
		shift;
		break;
		;;
	# an option argument, continue
	*)
		positionalOption "$1"
		shift;
		;;
esac
done

if [ -z "${dir1:-}" ]; then
	usage;
	exit 1;
fi

# Handling $patchfile
if [ ! -n "${patchUrl:-}" ]; then
	if [ ! -n "${patchfile:-}" ]; then
		# Auto patch finding (pun not intended!), in local
		searchExpression="$(autoPatchSearch1 "$dir1")"
		#searchExpression2="$(autoPatchSearch2 "$dir1")"
		count=$(find . -maxdepth 1 -mindepth 1 -iname "$searchExpression" -type f | wc -l)
		if (( $count == 1 )); then
			while read f; do
				patchfile="$f"
			done <<< "$(find . -maxdepth 1 -mindepth 1 -iname "$searchExpression" -type f)"
		elif (( $count > 1 )); then
			echo "Found multiple patches that match! Please specify the patch name, or remove useless patches."
			echo "Searched: $searchExpression"
			exit 1
		# elif (( $count <= 0 )); then
			# # Second try
			# count=$(find . -maxdepth 1 -mindepth 1 -iname "$searchExpression2" -type f | wc -l)
			# if (( $count == 1 )); then
				# find . -maxdepth 1 -mindepth 1 -iname "$searchExpression2" -type f | while read f; do
					# patchfile="$f"
				# done
			# elif (( $count > 1 )); then
				# echo "Found multiple patches that match! Please specify the patch name, or remove useless patches."
				# echo "Searched: $searchExpression2"
				# echo "Searched: $searchExpression"
				# exit 1
			# fi
		fi
		if [ ! -n "${patchfile:-}" ]; then
			if [ ! -f "$defaultpatchfile" ]; then
				echo "Found no patch. Please specify the patch name."
				echo "Searched: $defaultpatchfile"
				echo "Searched: $searchExpression2"
				echo "Searched: $searchExpression"
				exit 1
			fi
			patchfile="$defaultpatchfile"
		fi
	fi
else
	# Auto patch naming for distant retreival
	if [ ! -n "$patchfile" ]; then
		patchfile="$(extractUrlName "${patchUrl}")"
	fi
	if [ ! -n "$patchfile" ]; then
		patchfile="$defaultpatchfile"
	fi
fi

# Output dir
if [ -z "${dir2:-}" ]; then
	dir2="$(extractNewName "$patchfile")"
	if [ -z "${dir2:-}" ]; then
		dir2="${dir1}_patched"
	fi
fi


if (( $verbosity >= 2 )); then
	echo "$toolName"
	echo $separatorDisplay
	echo ""
	echo "Applying patch on '$dir1', to '$dir2'"
	echo "Local fatch file: $patchfile"
	echo "Patch URL to retreive: $patchUrl"
fi

# --------------------------------------------------------------------------------

if [ -n "${patchUrl:-}" ]; then
	if (( $verbosity >= 1 )); then
		echo $separatorDisplay
		echo "[$(date +%H:%M:%S)] Getting the patch file."
		echo ""
	fi
	wget "$patchUrl" -O "$patchfile" || exit 3
fi

autoDetectedDelta "$patchfile"

rm -r "$dir2" 2> /dev/null || true
mkdir -p "$dir2"

rm pipe1 pipe2 pipe2ar 2> /dev/null || true
mkfifo pipe1 pipe2 pipe2ar || exit 2

# (rdiff only) Theorical call would be:
#   xz -kd "$patchfile" --stdout > pipe2ar & tar -c --sort=name --no-auto-compress --directory="$dir1" . > pipe1 & rdiff patch pipe1 pipe2ar pipe2 & tar -x --directory="$dir2" . < pipe2
# Unfortunately, rdiff needs the base (here 'pipe1') to be seekable. But named pipes aren't (even if seekable pipes may have been proposed).
# We thus rely on an intermediate file.
if [ "$delta" != "xdelta3" ]; then
	if (( $verbosity >= 1 )); then
		echo $separatorDisplay
		echo "[$(date +%H:%M:%S)] Creating intermediate file before applying patch. This may take a while."
		echo ""
	fi
	rm "$intermediate1" 2> /dev/null || true
	readBaseSync "$dir1" "$intermediate1"		# Handles dir1 as an archive or dir - Sync reading
	#tar -cf "$intermediate1" --sort=name --no-auto-compress --directory="$dir1" . || exit 2
	#$tarDir -f "$intermediate1" pipe1 || exit 2
fi

if (( $verbosity >= 1 )); then
	echo $separatorDisplay
	echo "[$(date +%H:%M:%S)] Applying patch. This may take a while."
	echo ""
fi

if [ "$delta" == "xdelta3" ]; then
	# xdelta3
	readBase "$dir1" pipe1		# Handles dir1 as an archive or dir
	xz -kd "$patchfile" --stdout > pipe2ar & xdelta3 -d -W 16777216 -B 1073741824 -s pipe1 pipe2ar pipe2 & tar -x --directory="$dir2" . < pipe2
	#xdelta3 -d -W 16777216 -B 1073741824 -s pipe1 "$patchfile" pipe2 & tar -x --directory="$dir2" . < pipe2
else
	# rdiff
	xz -kd "$patchfile" --stdout > pipe2ar & rdiff patch "$intermediate1" pipe2ar pipe2 & tar -xf pipe2 --directory="$dir2" . || exit 2
	rm "$intermediate1"
fi
rm pipe1 pipe2 pipe2ar

if (( $verbosity >= 1 )); then
	echo $separatorDisplay
	echo "[$(date +%H:%M:%S)] Patch applied."
	echo ""
fi
